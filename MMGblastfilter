#!/usr/bin/perl
#By Thomas J Creedy, thomas@tjcreedy.co.uk 

use warnings;
use strict;
use Getopt::Long;
use Data::Dumper;
use File::Basename;

my @fastqs;
my @blasts;
my $suffix;
my ($keep, $remove);
my $debug;
my $help;

my $script = basename($0, ());

# Parsers
my $blastparse = '^([A-Za-z:_\d]+)[\s\/]';
my $illumina = '^@((?:[A-Z0-9-]+:){6}[A-Z0-9-]+)($|\s.+$)';
my $BGIseq = '^@([A-Z]{2}\d{9}L\dC\d{3}R\d{3}_\d+)\/[1-2]$';


########################################################
# USAGE
#
my $usage =<<USAGE;

Description:
	In conjunction with running blast against a custom database comprising reference sequence or sequences, this script allows easy filtering of large files of sequences according to one or many references sequences.
	$script takes one or more fastq files and filters sequences based on one or more blast output files. Generally if more than one file is passed they will be the forward and reverse reads of a single library, and the blast output files will be those produced by blasting each of these reads files separately. In such a case, this script removes the need to concatenate two blast files.
	Filtering can either -keep or -remove sequences that are present in the blast files. These two flags cannot be used together. A separate fastq is output for each input fastq.
	
Usage:

	$script --fastq <in.fq> [--fastq <in2.fq>] --blast <in.txt> [--blast <in2.txt] [--suffix <text>] [--keep] [--remove]

Arguments:

	  fastq:  The file path of a fastq to filter. Each fastq requires a separate --fastq argument.
	  blast:  The file path of a blast output, tab-delimited, in which the first column is query names - as output by blast format 6. Each blast output requires a separate --fastq argument.
	 suffix:  Optional. Text to add to the file name of the output fastqs.
	   keep:  Keep any sequences in fastq that are present in the blast files.
         remove:  Remove any sequences in fastq that are present in the blast files.
	   help:  Prints out this helpful message.

USAGE
#
######################################################

GetOptions("fastq=s"		=> \@fastqs,
	   "blast=s"		=> \@blasts,
	   "suffix=s"		=> \$suffix,
	   "keep"		=> \$keep,
	   "remove"		=> \$remove,
	   "help"		=> \$help,
	   "debug"		=> \$debug) or die "Error getting options\n";

print $usage and exit if $help;

die "\nError: $script requires at least one fastq and at least one blast output.\n\n" unless(@fastqs and @blasts);
die "\nError: -keep and -remove are mutually exclusive, please only input one.\n\n" if($keep and $remove);
die "\nError: please use flags -keep or -remove to tell me how to filter.\n\n" unless($keep or $remove);

# Read in blast file(s)
print "Reading blast file(s)...";

my %headers_passed;
my $lines_read;
foreach my $blastpath (@blasts){
	open my $blout, '<', $blastpath or die "Cannot open $blastpath\n";
	while(my $line = <$blout>){
		chomp $line;
		$line =~ /$blastparse/;
		$headers_passed{$1}=1;
		$lines_read++;
	}
	close $blout;
}

printf "$lines_read lines successfully read, %d paired names loaded for filtering.\n", scalar keys %headers_passed; 

if($debug){
	print "\nDEBUG: first 100 BLAST passed headers follow\n";
	my @hundredheads = (keys %headers_passed)[0..99];
	print Dumper \@hundredheads;
}

if($suffix){
	$suffix .= ".";
	print "Output file(s) will use suffix $suffix\n";
} else {
	$suffix = ""
}

my $headparser;
foreach my $fastqpath (@fastqs){
	my ($nsequences,$nprinted) = (0,0);
	open my $fqin, '<', $fastqpath or die "Cannot read $fastqpath\n";
	
	my $name = fileparse($fastqpath,(".fq",".fastq"));
	print "Filtering ",$name,"\n";
	open my $fqout, '>', "$name.filtered.${suffix}fq" or die "Cannot write to $name.filtered.${suffix}fq\n";
	
	
	if($fastqpath eq $fastqs[0]){
		my $fline = <$fqin>;
		print "DEBUG: identifying header type using first line:\n$fline\n" if $debug;
		if($fline =~ /$illumina/){
			$headparser = $illumina;
			print "Headers identified as Illumina\n";
		}elsif($fline =~ /$BGIseq/){
			$headparser = $BGIseq;
			print "Headers identified as BGIseq\n";
		}else{
			die "Cannot detect input fastq header format\n";
		}
		seek $fqin,0,0;
	}

	my $print;
	while(my $line = <$fqin>){
		if($line =~ /$headparser/){
			print "DEBUG checking header $line using key $1\n" if $debug;			
			$nsequences++;
			my $present = exists $headers_passed{$1};
			if(($present and $keep) or (!$present and $remove)){
				$print++;
				print $fqout $line;
				$nprinted++;
			} else {
				undef($print);
			}
		} elsif($print) {
			print $fqout $line;
		}
	}
	print "$nprinted of $nsequences sequences passed filter for $fastqpath\n";
	close $fqin;
	close $fqout;
	
}

exit;
